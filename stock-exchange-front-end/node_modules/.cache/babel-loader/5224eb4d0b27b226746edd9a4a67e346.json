{"ast":null,"code":"import _objectSpread from \"/Users/flatironschool/Desktop/Qun/project/stock-exchange/stock-exchange-front-end/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nconst defaultState = {\n  user: null\n};\n\nfunction reducer(prevState = defaultState, action) {\n  switch (action.type) {\n    case \"USER\":\n      return _objectSpread({}, prevState, {\n        user: action.data.user\n      });\n\n    case \"BUY\":\n      debugger;\n      let leftOverMoney = Math.round((prevState.user.money - action.data.value) * 100) / 100;\n\n      if (prevState.user.money - action.data.value > 0) {\n        return _objectSpread({}, prevState, {\n          user: _objectSpread({}, prevState.user, {\n            money: leftOverMoney\n          })\n        });\n      } else {\n        alert(\"not enought money\");\n      }\n\n    default:\n      return prevState;\n  }\n}\n\nexport default reducer;","map":{"version":3,"sources":["/Users/flatironschool/Desktop/Qun/project/stock-exchange/stock-exchange-front-end/src/reducer.js"],"names":["defaultState","user","reducer","prevState","action","type","data","leftOverMoney","Math","round","money","value","alert"],"mappings":";AAAA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAC;AADc,CAArB;;AAIA,SAASC,OAAT,CAAiBC,SAAS,GAAGH,YAA7B,EAA2CI,MAA3C,EAAkD;AAChD,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,MAAL;AACE,+BAAWF,SAAX;AAAsBF,QAAAA,IAAI,EAAEG,MAAM,CAACE,IAAP,CAAYL;AAAxC;;AACA,SAAK,KAAL;AACA;AACE,UAAIM,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACN,SAAS,CAACF,IAAV,CAAeS,KAAf,GAAuBN,MAAM,CAACE,IAAP,CAAYK,KAApC,IAA6C,GAAxD,IAA6D,GAAjF;;AACA,UAAGR,SAAS,CAACF,IAAV,CAAeS,KAAf,GAAuBN,MAAM,CAACE,IAAP,CAAYK,KAAnC,GAA2C,CAA9C,EAAgD;AAC9C,iCAAWR,SAAX;AAAsBF,UAAAA,IAAI,oBAAME,SAAS,CAACF,IAAhB;AAAsBS,YAAAA,KAAK,EAACH;AAA5B;AAA1B;AACD,OAFD,MAEK;AACHK,QAAAA,KAAK,CAAC,mBAAD,CAAL;AACD;;AACL;AACE,aAAOT,SAAP;AAZJ;AAeD;;AAED,eAAeD,OAAf","sourcesContent":["const defaultState = {\n  user:null,\n  }\n\nfunction reducer(prevState = defaultState, action){\n  switch(action.type){\n    case \"USER\":\n      return {...prevState, user: action.data.user}\n      case \"BUY\":\n      debugger\n        let leftOverMoney = Math.round((prevState.user.money - action.data.value) * 100)/100\n        if(prevState.user.money - action.data.value > 0){\n          return {...prevState, user: {...prevState.user, money:leftOverMoney}}\n        }else{\n          alert(\"not enought money\")\n        }\n    default:\n      return prevState\n  }\n\n}\n\nexport default reducer\n"]},"metadata":{},"sourceType":"module"}